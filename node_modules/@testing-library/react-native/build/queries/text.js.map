{"version":3,"file":"text.js","names":["getChildrenAsText","children","textContent","React","Children","forEach","child","push","toString","props","filterNodeByType","Text","Fragment","getNodeByText","node","text","options","isTextComponent","textChildren","textToTest","join","exact","normalizer","matches","queryAllByText","instance","queryAllByTextFn","baseInstance","isHostElementForType","getCompositeParentOfType","results","findAll","getMultipleError","String","getMissingError","getBy","getAllBy","queryBy","queryAllBy","findBy","findAllBy","makeQueries","bindByTextQueries","getByText","getAllByText","queryByText","findByText","findAllByText"],"sources":["../../src/queries/text.ts"],"sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport { Text } from 'react-native';\nimport * as React from 'react';\nimport { filterNodeByType } from '../helpers/filterNodeByType';\nimport {\n  isHostElementForType,\n  getCompositeParentOfType,\n} from '../helpers/component-tree';\nimport { matches, TextMatch } from '../matches';\nimport type { NormalizerFn } from '../matches';\nimport { makeQueries } from './makeQueries';\nimport type {\n  FindAllByQuery,\n  FindByQuery,\n  GetAllByQuery,\n  GetByQuery,\n  QueryAllByQuery,\n  QueryByQuery,\n} from './makeQueries';\n\nexport type TextMatchOptions = {\n  exact?: boolean;\n  normalizer?: NormalizerFn;\n};\n\nconst getChildrenAsText = (children: React.ReactChild[]) => {\n  const textContent: string[] = [];\n  React.Children.forEach(children, (child) => {\n    if (typeof child === 'string') {\n      textContent.push(child);\n      return;\n    }\n\n    if (typeof child === 'number') {\n      textContent.push(child.toString());\n      return;\n    }\n\n    if (child?.props?.children) {\n      // Bail on traversing text children down the tree if current node (child)\n      // has no text. In such situations, react-test-renderer will traverse down\n      // this tree in a separate call and run this query again. As a result, the\n      // query will match the deepest text node that matches requested text.\n      if (filterNodeByType(child, Text)) {\n        return;\n      }\n\n      if (filterNodeByType(child, React.Fragment)) {\n        textContent.push(...getChildrenAsText(child.props.children));\n      }\n    }\n  });\n\n  return textContent;\n};\n\nconst getNodeByText = (\n  node: ReactTestInstance,\n  text: TextMatch,\n  options: TextMatchOptions = {}\n) => {\n  const isTextComponent = filterNodeByType(node, Text);\n  if (isTextComponent) {\n    const textChildren = getChildrenAsText(node.props.children);\n    if (textChildren) {\n      const textToTest = textChildren.join('');\n      const { exact, normalizer } = options;\n      return matches(text, textToTest, normalizer, exact);\n    }\n  }\n  return false;\n};\n\nconst queryAllByText = (\n  instance: ReactTestInstance\n): ((\n  text: TextMatch,\n  options?: TextMatchOptions\n) => Array<ReactTestInstance>) =>\n  function queryAllByTextFn(text, options) {\n    const baseInstance = isHostElementForType(instance, Text)\n      ? getCompositeParentOfType(instance, Text)\n      : instance;\n\n    if (!baseInstance) {\n      return [];\n    }\n\n    const results = baseInstance.findAll((node) =>\n      getNodeByText(node, text, options)\n    );\n\n    return results;\n  };\n\nconst getMultipleError = (text: TextMatch) =>\n  `Found multiple elements with text: ${String(text)}`;\nconst getMissingError = (text: TextMatch) =>\n  `Unable to find an element with text: ${String(text)}`;\n\nconst { getBy, getAllBy, queryBy, queryAllBy, findBy, findAllBy } = makeQueries(\n  queryAllByText,\n  getMissingError,\n  getMultipleError\n);\n\nexport type ByTextQueries = {\n  getByText: GetByQuery<TextMatch, TextMatchOptions>;\n  getAllByText: GetAllByQuery<TextMatch, TextMatchOptions>;\n  queryByText: QueryByQuery<TextMatch, TextMatchOptions>;\n  queryAllByText: QueryAllByQuery<TextMatch, TextMatchOptions>;\n  findByText: FindByQuery<TextMatch, TextMatchOptions>;\n  findAllByText: FindAllByQuery<TextMatch, TextMatchOptions>;\n};\n\nexport const bindByTextQueries = (\n  instance: ReactTestInstance\n): ByTextQueries => ({\n  getByText: getBy(instance),\n  getAllByText: getAllBy(instance),\n  queryByText: queryBy(instance),\n  queryAllByText: queryAllBy(instance),\n  findByText: findBy(instance),\n  findAllByText: findAllBy(instance),\n});\n"],"mappings":"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"}